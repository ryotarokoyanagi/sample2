{"version":3,"sources":["header.js","todoelement.js","addtodo.js","list.js","footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","TodoElement","this","props","onDelete","element","id","content","onClick","AddTodo","event","handleChange","value","target","todoElement","todoList","length","addList","type","onChange","List","state","key_value","setState","concat","alert","newTodoList","filter","map","key","handleDelete","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAYeA,E,uKARP,OACI,yBAAKC,UAAU,UACX,wBAAIA,UAAY,YAAhB,iC,GAJKC,IAAMC,WCcZC,E,yKAZXC,KAAKC,MAAMC,SAASF,KAAKC,MAAME,QAAQC,M,+BAEhC,IAAD,OACN,OACE,wBAAIR,UAAU,aACZ,8BAAOI,KAAKC,MAAME,QAAQE,SAC1B,4BAAQC,QAAS,kBAAK,EAAKJ,aAA3B,qB,GARkBL,IAAMC,WC6BjBS,E,2KA5BEC,GACXR,KAAKC,MAAMQ,aAAa,CACtBC,MAAOF,EAAMG,OAAOD,U,gCAKtB,IAAME,EAAc,CAClBP,QAASL,KAAKC,MAAMS,MACpBN,GAAIJ,KAAKC,MAAMY,SAASC,OAAS,GAEnCd,KAAKC,MAAMc,QAAQH,K,+BAGZ,IAAD,OACN,OACE,6BACE,2BACEI,KAAK,OACLN,MAAOV,KAAKC,MAAMS,MAClBO,SAAU,SAACT,GAAS,EAAKC,aAAaD,MAExC,4BAAQF,QAAS,kBAAK,EAAKS,YAA3B,qB,GAvBYlB,IAAMC,WC2DboB,E,kDAxDX,WAAYjB,GAAO,IAAD,8BACd,cAAMA,IACDkB,MAAQ,CACXN,SAAU,GACVH,MAAO,IAJK,E,yDAQLU,GACXpB,KAAKqB,SAASD,K,8BAGRR,GACNZ,KAAKqB,SAAS,CACZR,SAAUb,KAAKmB,MAAMN,SAASS,OAAOV,GACrCF,MAAO,O,mCAIEN,GACXmB,MAAM,sEACN,IAAMC,EAAcxB,KAAKmB,MAAMN,SAASY,QAAO,SAAAtB,GAAO,OACpDA,EAAQC,KAAOA,KAEjBJ,KAAKqB,SAAS,CAACR,SAAUW,M,+BAGlB,IAAD,OACN,OACE,yBAAK5B,UAAU,QACb,yBAAMA,UAAU,UACd,uDACA,kBAAC,EAAD,iBACMI,KAAKmB,MADX,CAEEV,aAAc,SAACW,GAAa,EAAKX,aAAaW,IAC9CL,QAAS,SAACH,GAAe,EAAKG,QAAQH,QAG1C,yBAAKhB,UAAU,YACb,kDACA,4BACGI,KAAKmB,MAAMN,SAASa,KAAI,SAACvB,GAAD,OACvB,kBAAC,EAAD,eACEwB,IAAKxB,EAAQC,GACbD,QAASA,EACTD,SAAU,SAACE,GAAM,EAAKwB,aAAaxB,KAC/B,EAAKe,kB,GA/CRtB,IAAMC,WCOV+B,E,uKAPP,OACI,yBAAKjC,UAAY,iB,GAHRC,IAAMC,WCmBZgC,E,uKAdX,OACE,6BACE,kBAAC,EAAD,MACA,6BACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,W,GARUjC,IAAMC,WCOJiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b66b218b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className='header'>\r\n                <h1 className = \"header-h\">To do リスト</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react'; \r\n\r\nclass TodoElement extends React.Component{\r\n  onDelete(){\r\n    this.props.onDelete(this.props.element.id)\r\n  }\r\n  render(){\r\n    return(\r\n      <li className='todo-list'>\r\n        <span>{this.props.element.content}</span>\r\n        <button onClick={()=> this.onDelete()}>削除</button>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoElement;","import React from 'react';\r\n\r\nclass AddTodo extends React.Component{\r\n    handleChange(event){\r\n      this.props.handleChange({\r\n        value: event.target.value,\r\n      })\r\n    }\r\n  \r\n    addList(){\r\n      const todoElement = {\r\n        content: this.props.value,\r\n        id: this.props.todoList.length + 1,\r\n      }\r\n      this.props.addList(todoElement)\r\n    }\r\n\r\n    render(){\r\n      return(\r\n        <div>\r\n          <input \r\n            type=\"text\" \r\n            value={this.props.value} \r\n            onChange={(event)=>{this.handleChange(event)}}\r\n          />\r\n          <button onClick={()=> this.addList()}>追加</button>\r\n        </div>\r\n      )\r\n    }\r\n}\r\n  \r\nexport default AddTodo;","import React from 'react';\r\nimport TodoElement from './todoelement';\r\nimport AddTodo from './addtodo';\r\n\r\nclass List extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          todoList: [],\r\n          value: '',\r\n        }\r\n    }\r\n    \r\n    handleChange(key_value){\r\n      this.setState(key_value)\r\n    }\r\n    \r\n    addList(todoElement){\r\n      this.setState({\r\n        todoList: this.state.todoList.concat(todoElement),\r\n        value: '',\r\n      })\r\n    }\r\n\r\n    handleDelete(id){\r\n      alert('削除してもいいですか？')\r\n      const newTodoList = this.state.todoList.filter(element=>\r\n        element.id !== id\r\n      )\r\n      this.setState({todoList: newTodoList})\r\n    }\r\n\r\n    render(){    \r\n      return (\r\n        <div className=\"main\">\r\n          <div  className=\"action\">\r\n            <p>追加する</p>\r\n            <AddTodo \r\n              {...this.state} \r\n              handleChange={(key_value)=>{this.handleChange(key_value)}}\r\n              addList={(todoElement)=>{this.addList(todoElement)}}\r\n            />\r\n          </div>\r\n          <div className=\"indicate\">\r\n            <h2>リスト</h2>\r\n            <ol>\r\n              {this.state.todoList.map((element)=>(\r\n                <TodoElement \r\n                  key={element.id} \r\n                  element={element}\r\n                  onDelete={(id)=>{this.handleDelete(id)}} \r\n                  {...this.state}\r\n                />\r\n              ))}\r\n            </ol>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default List;","import React from 'react';\r\n\r\nclass Footer extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className = \"footer-d\">\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport Header from './header';\nimport List from './list';\nimport Footer from './footer';\n\nclass App extends React.Component{\n  render(){\n    return(\n      <div>\n        <Header />\n        <div>\n          <List />\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}